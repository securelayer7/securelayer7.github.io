<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hardware on Securelayer7</title>
    <link>https://securelayer7.github.io/tags/hardware/</link>
    <description>Recent content in Hardware on Securelayer7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2019 SecureLayer7, LLC. All rights reserved.</copyright>
    <lastBuildDate>Wed, 17 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://securelayer7.github.io/tags/hardware/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reading data from EEPROM without desoldering</title>
      <link>https://securelayer7.github.io/posts/reading-firmware-from-eeprom-easyway/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://securelayer7.github.io/posts/reading-firmware-from-eeprom-easyway/</guid>
      <description>Introduction In IoT/Hardware security it is common practice of dumping firmware/bootloader data inorder to perform reverse engineering for closed source system applications.
Well known easiest way is to download .bin/.zip (packed firmware) files from device manufacturer&amp;rsquo;s website which they provide to end users for firmware upgrade operations. And later us hackers/security researchers throw these files to reverse engineering softwares such as binwalk to check it&amp;rsquo;s contents and extract the needed stuff.</description>
    </item>
    
    <item>
      <title>Identifying UART Pins Without a Multi-Meter (PinNinja)</title>
      <link>https://securelayer7.github.io/posts/identifying-uart-pins-without-a-multi-meter/</link>
      <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://securelayer7.github.io/posts/identifying-uart-pins-without-a-multi-meter/</guid>
      <description>As someone who likes to tinker with hardware, we often find ourselves opening up a device to find UART pins which are originally meant for debugging and testing We often use these to connect to the device. But most of us hit a small snag here.
Snag No 1: More often than not the pins are not labeled.
(So you mean they put those pins there so we can test the device but didn’t tell what pin was what because they didn’t want us to test it?</description>
    </item>
    
  </channel>
</rss>