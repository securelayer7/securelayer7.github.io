<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Securelayer7</title>
    <link>https://securelayer7.github.io/posts/</link>
    <description>Recent content in Posts on Securelayer7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2019 SecureLayer7, LLC. All rights reserved.</copyright>
    <lastBuildDate>Wed, 17 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://securelayer7.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reading data from EEPROM without desoldering</title>
      <link>https://securelayer7.github.io/posts/reading-firmware-from-eeprom-easyway/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://securelayer7.github.io/posts/reading-firmware-from-eeprom-easyway/</guid>
      <description>Introduction In IoT/Hardware security it is common practice of dumping firmware/bootloader data inorder to perform reverse engineering for closed source system applications.
Well known easiest way is to download .bin/.zip (packed firmware) files from device manufacturer&amp;rsquo;s website which they provide to end users for firmware upgrade operations. And later us hackers/security researchers throw these files to reverse engineering softwares such as binwalk to check it&amp;rsquo;s contents and extract the needed stuff.</description>
    </item>
    
    <item>
      <title>XSS Auditor no more part of Google Chrome</title>
      <link>https://securelayer7.github.io/posts/xss-auditor-no-more-part-of-google-chrome/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://securelayer7.github.io/posts/xss-auditor-no-more-part-of-google-chrome/</guid>
      <description>Yes, you heard correct Google Chromium devs announced the news about XSS auditor. The XSS auditor time and again bypassed by the client security researcher to execute the malicious javascript, and this may be the primary reason to be deprecated and removed from the Google Chrome browser.
The anti-cross site scripting engine (XSS auditor) is not covering all XSS type such as DOM-based XSS, mXSS, and persistent XSS. XSS auditor mostly working on for the reflected XSS, and this is again can be bypassed by tricking the Javascript payload.</description>
    </item>
    
    <item>
      <title>SecureLayer7 at RISE Conference, Hong Kong 2019</title>
      <link>https://securelayer7.github.io/posts/rise-conference-2019/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://securelayer7.github.io/posts/rise-conference-2019/</guid>
      <description>Watch7 AuthSafe The SecureLayer7’s Watch7 AuthSafe is user and entity behavior analytics which gets integrated with applications. AuthSafe provides the account security that disallows attacker to access the account even if attacker has valid credentials.
Watch7 LogSight The SecureLayer7’s Watch7 LogSight is a threat detection platform that finds high-quality threats in the infrastructure from logs and shares the threat details to give you the quick way of eradicating attacks in infrastructure.</description>
    </item>
    
    <item>
      <title>Identifying UART Pins Without a Multi-Meter (PinNinja)</title>
      <link>https://securelayer7.github.io/posts/identifying-uart-pins-without-a-multi-meter/</link>
      <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://securelayer7.github.io/posts/identifying-uart-pins-without-a-multi-meter/</guid>
      <description>As someone who likes to tinker with hardware, we often find ourselves opening up a device to find UART pins which are originally meant for debugging and testing We often use these to connect to the device. But most of us hit a small snag here.
Snag No 1: More often than not the pins are not labeled.
(So you mean they put those pins there so we can test the device but didn’t tell what pin was what because they didn’t want us to test it?</description>
    </item>
    
  </channel>
</rss>